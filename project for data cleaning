select * from 
portfolioprojects.dbo.NashvilleHousing









--standardizing date 

select SaleDate from 
portfolioprojects.dbo.NashvilleHousing

select  cast(SaleDate as date) as newdate
from portfolioprojects.dbo.NashvilleHousing

update portfolioprojects.dbo.NashvilleHousing
set SaleDate = cast(SaleDate as date) 

--now trying alter command to do the same 


ALTER TABLE portfolioprojects.dbo.NashvilleHousing
Add   SaleDateConverted date  ;


update portfolioprojects.dbo.NashvilleHousing
set SaleDateConverted = convert(date, SaleDate) ;     --( u can aslo use only saledate instead of convert(date, saledate)


Alter table portfolioprojects.dbo.NashvilleHousing --( using alter direct command to change the data type )
alter column SaleDate date 


select * from portfolioprojects.dbo.NashvilleHousing


















------populate the property address 


select * from portfolioprojects.dbo.NashvilleHousing                      --learn inner join 
where PropertyAddress is null
--order by ParcelID

select a.ParcelID, a.PropertyAddress , b.ParcelID, b.PropertyAddress 
from portfolioprojects.dbo.NashvilleHousing a , portfolioprojects.dbo.NashvilleHousing b
where a.ParcelID = b.ParcelID 
and a.[UniqueID ]<>b.[UniqueID ]
and a.PropertyAddress is not null 

--using isnull functon to populate the null values from b.propety address--


select a.ParcelID, a.PropertyAddress , b.ParcelID, b.PropertyAddress,  isnull(a.PropertyAddress , b.PropertyAddress)
from portfolioprojects.dbo.NashvilleHousing a , portfolioprojects.dbo.NashvilleHousing b
where a.ParcelID = b.ParcelID 
and a.[UniqueID ]<>b.[UniqueID ]
and a.PropertyAddress is null 


update a
set a.PropertyAddress = isnull(a.PropertyAddress , b.PropertyAddress)
from portfolioprojects.dbo.NashvilleHousing a , portfolioprojects.dbo.NashvilleHousing b
where a.ParcelID = b.ParcelID 
and a.[UniqueID ]<>b.[UniqueID ]
and a.PropertyAddress is null 


select * from portfolioprojects.dbo.NashvilleHousing      --- to check if its updated result is showing nothing becoz now there are no null values 
where PropertyAddress is  null






































--breaking out address into indiviusal columns (adress city sate)


select PropertyAddress from portfolioprojects.dbo.NashvilleHousing 


select 
SUBSTRING(PropertyAddress , 1, CHARINDEX(',', PropertyAddress) -1) as address , 
substring(PropertyAddress, Charindex(',' , PropertyAddress ) +1, len(propertyAddress)) as address 

from portfolioprojects.dbo.NashvilleHousing 

Alter table portfolioprojects.dbo.NashvilleHousing 
add PropertySplitAddres nvarchar(255)

update portfolioprojects.dbo.NashvilleHousing 
set PropertySplitAddres = SUBSTRING(PropertyAddress , 1, CHARINDEX(',', PropertyAddress) -1)



Alter table portfolioprojects.dbo.NashvilleHousing 
add PropertySplitCity  nvarchar(255);

update portfolioprojects.dbo.NashvilleHousing 
set PropertySplitCity = substring(PropertyAddress, Charindex(',' , PropertyAddress ) +1, len(propertyAddress))

select * from portfolioprojects.dbo.NashvilleHousing 


--alter table portfolioprojects.dbo.NashvilleHousing 
--drop column PropertySplitCity ,PropertySplitAddress 








--now using the parsename fucntion to separate the owner address 

select Owneraddress from portfolioprojects.dbo.NashvilleHousing 
where Owneraddress is not null


select 
PARSENAME(replace(Owneraddress , ',', '.') , 3) as address,
PARSENAME(replace(Owneraddress , ',', '.') , 2) as city ,
PARSENAME(replace(Owneraddress , ',', '.') , 1) as state

from portfolioprojects.dbo.NashvilleHousing 
where Owneraddress is not null


Alter table portfolioprojects.dbo.NashvilleHousing 
add Ownersplitaddress nvarchar(255)

update  portfolioprojects.dbo.NashvilleHousing 
set Ownersplitaddress = PARSENAME(replace(Owneraddress , ',', '.') , 3)

Alter table portfolioprojects.dbo.NashvilleHousing 
add Ownersplitcity nvarchar(255)

update  portfolioprojects.dbo.NashvilleHousing 
set Ownersplitcity = PARSENAME(replace(Owneraddress , ',', '.') , 2)


Alter table portfolioprojects.dbo.NashvilleHousing 
add Ownersplitstate nvarchar(255)

update  portfolioprojects.dbo.NashvilleHousing 
set Ownersplitstate = PARSENAME(replace(Owneraddress , ',', '.') , 1)







--changing y and N in soldvacnt feild 

select *
from portfolioprojects.dbo.NashvilleHousing 

select distinct(soldAsvacant), COUNT(soldAsvacant)
from portfolioprojects.dbo.NashvilleHousing 
group by Soldasvacant
order by 2



select Soldasvacant ,
case when soldasvacant = 'N' then 'NO'
    when SoldAsvacant = 'Y' then 'YES'
	 else soldasvacant 
	 end
from portfolioprojects.dbo.NashvilleHousing 

update portfolioprojects.dbo.NashvilleHousing 
set 
soldasvacant = case when soldasvacant = 'N' then 'NO'
                    when SoldAsvacant = 'Y' then 'YES'
	                else soldasvacant 
	                end


---to check the results

select distinct(soldAsvacant), COUNT(soldAsvacant)
from portfolioprojects.dbo.NashvilleHousing 
group by Soldasvacant
order by 2











--remove duplications row wise-----


select *,  ROW_NUMBER() over (
partition by parcelId ,
             PropertyAddress,
			 saleDate,
			 saleprice,
			 legalReference 
			 order by uniqueid
			 )  rownum
  from 
portfolioprojects.dbo.NashvilleHousing 
order by PropertyAddress


---Now we use CTE to delete the duplicate values , we are using CTE value becoz above statement will not take the where 
--condition 


with rownumbcte as 
(                                     
select *,  ROW_NUMBER() over (
partition by parcelId ,
             PropertyAddress,
			 saleDate,
			 saleprice,
			 legalReference 
			 order by uniqueid
			 )  rownum
  from 
portfolioprojects.dbo.NashvilleHousing )
delete  from rownumbcte
where rownum >1                            --now only 104 rows are coming all the duplicates-----



-----deleting the unused or duplicate columns-----

select * from  portfolioprojects.dbo.NashvilleHousing 

Alter table  portfolioprojects.dbo.NashvilleHousing 
drop column propertyaddress
